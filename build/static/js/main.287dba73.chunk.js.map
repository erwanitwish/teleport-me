{"version":3,"sources":["components/button.jsx","components/met-access.jsx","components/youtube-access.jsx","components/credits.jsx","App.js","components/webcam-access.jsx","serviceWorker.js","index.js","chevalet.png"],"names":["Button","idButton","func","butnTxt","stylize","style","id","onClick","MetAccess","props","state","artId","art","loading","letters","letter","arrayId","getArt","bind","getArrayID","randomLetter","this","setState","Math","floor","random","length","arrayID","axios","get","then","res","data","objectIDs","catch","err","finalId","className","to","config","slow","delay","from","opacity","transform","objectName","creditLine","src","chevalet","alt","primaryImage","React","Component","YoutubeAccess","youtubeUrl","startTime","console","log","url","width","height","muted","playing","youtube","playerVars","control","start","Credits","creditMove","useSpring","top","div","App","reload","reloading","exact","path","move","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.287dba73.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Button({idButton, func, butnTxt, stylize }) {\n  return (\n    <>\n      <button style={stylize} id={idButton} onClick={func}>{butnTxt}</button>\n    </>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Spring, config } from \"react-spring/renderprops\";\nimport chevalet from \"../chevalet.png\";\nimport Button from \"./button\";\n\nclass MetAccess extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      artId: \"\",\n      art: \"\",\n      loading: true,\n      letters: [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n      ],\n      letter: \"\",\n      arrayId: [],\n    };\n    this.getArt = this.getArt.bind(this);\n    this.getArrayID = this.getArrayID.bind(this);\n    this.randomLetter = this.randomLetter.bind(this);\n  }\n\n  randomLetter() {\n    this.setState({\n      letter: this.state.letters[\n        Math.floor(Math.random() * (this.state.letters.length - 1))\n      ],\n    });\n  }\n\n  getArrayID() {\n    this.setState({ arrayID: [] });\n    axios\n      .get(\n        `https://collectionapi.metmuseum.org/public/collection/v1/search?isHighlight=true&q=${this.state.letter}`\n      )\n      .then((res) => {\n        this.setState({\n          arrayId: [...this.state.arrayId, ...res.data.objectIDs],\n        });\n      })\n      .catch((err) => this.getArrayID());\n    this.randomLetter();\n  }\n\n  componentDidMount() {\n    this.randomLetter();\n    this.getArrayID();\n  }\n\n  getArt() {\n    const finalId = this.state.arrayId[\n      Math.floor(Math.random() * (this.state.arrayId.length - 1))\n    ];\n    axios\n      .get(\n        `https://collectionapi.metmuseum.org/public/collection/v1/objects/${finalId}`\n      )\n      .then((res) => {\n        this.setState({ art: res.data });\n      });\n    this.getArrayID();\n  }\n\n  render() {\n    return (\n      <div className=\"tableau\">\n        <Link to=\"/credits\">\n          <button id=\"credits-button\">crédits</button>\n        </Link>\n        <Spring\n          config={config.slow}\n          delay={1000}\n          from={{ opacity: 0, transform: \"translateX(10vw)\" }}\n          to={{ opacity: 1, transform: \"translateX(0vw)\" }}\n        >\n          {(props) => (\n            <Button\n              stylize={props}\n              idButton=\"button1\"\n              func={this.getArt}\n              butnTxt=\"TABLEAU\"\n            />\n          )}\n        </Spring>\n\n        <h1 id=\"title-tableau\">{this.state.art.objectName}</h1>\n        <p id=\"credit-tableau\">{this.state.art.creditLine}</p>\n        <div className=\"chevalet-tableau\">\n          <div className=\"chevalet\">\n            <img src={chevalet} alt=\"chevalet\"></img>\n          </div>\n          <div className=\"perspective\">\n            <img\n              className=\"image-tableau\"\n              src={this.state.art.primaryImage}\n              alt={this.state.art.objectName}\n            ></img>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MetAccess;\n","import React from \"react\";\nimport axios from \"axios\";\nimport ReactPlayer from \"react-player\";\nimport { Spring, config } from \"react-spring/renderprops\";\nimport Button from \"./button\";\n\nclass YoutubeAccess extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      youtubeUrl: \"https://www.youtube.com/watch?v=rgZfmWXTqas\",\n      startTime: Math.floor(Math.random() * 3500),\n    };\n    // this.handleRandomTime = this.handleRandomTime.bind(this);\n  }\n\n  // handleRandomTime() {\n  //   this.setState({ startTime: Math.floor(Math.random() * 3500) });\n  // }\n\n  // componentDidMount() {\n  //   this.handleRandomTime();\n  //   console.log(\"Hello\");\n  // }\n\n  render() {\n    console.log(this.state.startTime);\n    return (\n      <>\n        {\n          // <Spring\n          //   config={config.slow}\n          //   delay={1000}\n          //   from={{ opacity: 0, transform: \"translateX(-10vw)\" }}\n          //   to={{ opacity: 1, transform: \"translateX(0vw)\" }}\n          // >\n          //   {(props) => (\n          //     <Button\n          //       stylize={props}\n          //       idButton=\"button2\"\n          //       func={this.handleRandomTime}\n          //       butnTxt=\"TÉLÉPORTATION\"\n          //       move=\"left\"\n          //     />\n          //   )}\n          // </Spring>\n        }\n        <div className=\"back-video\">\n          <ReactPlayer\n            url={this.state.youtubeUrl}\n            width=\"100%\"\n            height=\"100%\"\n            muted\n            playing\n            config={{\n              youtube: {\n                playerVars: {\n                  control: 0,\n                  start: this.state.startTime,\n                },\n              },\n            }}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default YoutubeAccess;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSpring, animated, config } from 'react-spring';\n\nfunction Credits() {\n\n  const creditMove = useSpring({ opacity: 1, top: '87%', from: { opacity: 0, top: '75%' }, delay: 1000, config: config.slow });\n\n  return (\n    <div className=\"credits\">\n      <Link to=\"/\">\n        <button id=\"retour-button\">Retour</button>\n      </Link>\n      <animated.div style={creditMove} className=\"text-credits\">\n        <h1>\n          Design and Dev by <br />\n          Brice Le Gallo & Erwan Quillec\n        </h1>\n        <p>thanks to Laura</p>\n      </animated.div>\n    </div>\n  );\n}\n\nexport default Credits;\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport MetAccess from \"./components/met-access\";\nimport YoutubeAccess from \"./components/youtube-access\";\nimport Credits from \"./components/credits\";\nimport WebcamAccess from \"./components/webcam-access\";\nimport { Spring, config } from \"react-spring/renderprops\";\nimport Button from \"./components/button\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      reload: true,\n    };\n    this.reloading = this.reloading.bind(this);\n  }\n\n  reloading () {\n    this.setState({ reload: !this.state.reload });\n  }\n\n  render() {\n    return (\n      <Router>\n        <switch>\n          <div className=\"App\">\n            <Route exact path=\"/\">\n              {\n                <Spring\n                  config={config.slow}\n                  delay={1000}\n                  from={{ opacity: 0, transform: \"translateX(-10vw)\" }}\n                  to={{ opacity: 1, transform: \"translateX(0vw)\" }}\n                >\n                  {(props) => (\n                    <Button\n                      stylize={props}\n                      idButton=\"button2\"\n                      func={this.reloading}\n                      butnTxt=\"TÉLÉPORTATION\"\n                      move=\"left\"\n                    />\n                  )}\n                </Spring>\n              }\n              <MetAccess />\n              <div className=\"background\"></div>\n              <div className=\"behind\">\n                {this.state.reload ? <YoutubeAccess /> : this.reloading()}\n              </div>\n            </Route>\n            <Route exact path=\"/credits\">\n              <Credits />\n            </Route>\n          </div>\n        </switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Spring, config } from 'react-spring/renderprops';\nimport Button from './button';\n\nclass WebcamAccess extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      webcamId: 0,\n      playerSource: \"\",\n    };\n    this.getWebcamId = this.getWebcamId.bind(this);\n    this.handleGetWebcam = this.handleGetWebcam.bind(this);\n  }\n\n  getWebcamId() {\n    const rdmId = Math.floor(Math.random() * 200);\n    axios\n      .get(\n        `https://api.windy.com/api/webcams/v2/list/limit=1,${rdmId}?key=6EnLIffAmP8fvfN8ST6flzRDBPMKzglk`\n      )\n      .then((response) => response.data)\n      .then((data) => {\n        if (data.result && data.result.webcams[0].status === \"active\") {\n          this.setState({ webcamId: data.result.webcams[0].id });\n        } else {\n          this.getWebcamId();\n        }\n      });\n  }\n\n  componentDidMount() {\n    this.getWebcamId();\n  }\n\n  componentDidUpdate() {\n    this.getWebcamId();\n  }\n\n  handleGetWebcam() {\n    axios\n      .get(\n        `https://api.windy.com/api/webcams/v2/list/webcam=${this.state.webcamId}?show=webcams:image,player,location&key=6EnLIffAmP8fvfN8ST6flzRDBPMKzglk`\n      )\n      .then((response) => response.data)\n      .then((data) => {\n        this.setState({\n          playerSource: data.result.webcams[0].player.day.embed,\n        });\n        console.log(data);\n        console.log(data.result.webcams[0].player.day.embed);\n      });\n  }\n\n  render() {\n    return (\n      <>\n        <Spring\n          config={config.slow}\n          delay={1000}\n          from={{ opacity: 0, transform: 'translateX(-10vw)' }}\n          to={{ opacity: 1, transform: 'translateX(0vw)' }}>\n          {props => <Button stylize={props} idButton='button2' func={this.handleGetWebcam} butnTxt='TÉLÉPORTATION' move='left' />}\n        </Spring>\n        <div className=\"back-video\">\n          <iframe src={this.state.playerSource}></iframe>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default WebcamAccess;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/chevalet.f4ffc688.png\";"],"sourceRoot":""}